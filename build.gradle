buildscript {
    repositories {
        google()
    }

    dependencies {
        classpath 'androidx.navigation:navigation-safe-args-gradle-plugin:2.3.5'
        classpath 'com.android.tools.build:gradle:4.1.3'
        classpath 'com.google.android.gms:oss-licenses-plugin:0.10.4'
        classpath 'com.google.dagger:hilt-android-gradle-plugin:2.35.1'
    }
}

plugins {
    id 'com.apollographql.apollo' version '2.5.7' apply false
    id 'com.diffplug.spotless' version '5.12.4' apply false
    id 'com.google.protobuf' version '0.8.16' apply false
    id 'org.jetbrains.kotlin.android' version '1.5.0' apply false
    id 'org.jetbrains.kotlin.plugin.serialization' version '1.5.0' apply false
    id 'org.sonarqube' version '3.2.0'
}

sonarqube {
    properties {
        property 'sonar.android.lint.report', 'build/reports/lint-results.xml'
    }
}

allprojects {
    repositories {
        google()
        mavenCentral()
        jcenter {
            content {
                includeGroup('org.jetbrains.trove4j')
            }
        }

        maven {
            url 'https://maven.pkg.github.com/sukawasatoru/android-logger'
            credentials {
                username = project.findProperty("gpr.user") ?: System.getenv("USERNAME")
                password = project.findProperty("gpr.key") ?: System.getenv("TOKEN")
            }
        }
    }
}

def setupAndroidPlugin = { isCi, project ->
    project.android {
        compileSdkVersion 30
        buildToolsVersion '30.0.3'

        defaultConfig {
            minSdkVersion 24
            targetSdkVersion 30
        }

        dexOptions {
            preDexLibraries = !isCi
        }

        compileOptions {
            coreLibraryDesugaringEnabled true
            targetCompatibility = JavaVersion.VERSION_1_8
            sourceCompatibility = JavaVersion.VERSION_1_8
        }
    }

    project.dependencies {
        coreLibraryDesugaring 'com.android.tools:desugar_jdk_libs:1.1.5'
    }
}.curry(System.getenv('CI') == 'true')

def setupKotlinAndroidPlugin = { project ->
    project.android {
        sourceSets {
            androidTest.java.srcDirs += 'src/androidTest/kotlin'
            debug.java.srcDirs += 'src/debug/kotlin'
            main.java.srcDirs += 'src/main/kotlin'
            test.java.srcDirs += 'src/test/kotlin'
            testDebug.java.srcDirs += 'src/testDebug/kotlin'
        }

        kotlinOptions {
            jvmTarget = JavaVersion.VERSION_1_8
        }
    }
}

def setupSpotlessPlugin = { Project project ->
    project.spotless {
        kotlin {
            target project.fileTree(dir: 'src', include: '**/*.kt', exclude: ['test/**/*.kt', 'androidTest/**/*.kt'])
            ktlint('0.41.0').userData([
                android: 'true',
                max_line_length: '120',
            ])
        }
    }
}

subprojects {
    project.plugins.whenPluginAdded {
        switch (it.class.name) {
            case 'com.android.build.gradle.AppPlugin':
            case 'com.android.build.gradle.LibraryPlugin':
                setupAndroidPlugin(project)
                break
            case 'org.jetbrains.kotlin.gradle.plugin.KotlinAndroidPluginWrapper':
                setupKotlinAndroidPlugin(project)
                break
            case 'com.diffplug.gradle.spotless.SpotlessPlugin':
                setupSpotlessPlugin(project)
                break
            default:
                break
        }
    }
}

task clean(type: Delete) {
    delete rootProject.buildDir
}
